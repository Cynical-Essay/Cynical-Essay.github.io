[{"content":"前言 部落格雛形建立並 Host 在平台後，接下來要慢慢將各種 細節 / 機制 建立起來。而其中一項就是留言功能了。畢竟文章寫都寫了，哪怕是看到一兩個讀者的回饋，對寂寞的部落格作者而言都會起到激勵的作用。\n本文紀錄透過 Utterances 整合 Github Issues 至 Hugo 的過程，提供一個讓讀者能夠針對我們的文章回饋想法的功能。\n始於簡介 Comments Service With Hugo Comments Service，留言服務，提供使用者對網站 or 網路社群留言的功能。 使用者可以使用如 Disqus / Facebook Comments 等服務提供商提供的現有服務，也可以透過 Isso 等留言服務開源專案自行 Host。自行 Host 的特性是資訊不會存在第三方的服務內，可控性較高， 缺點則是需要付出 架設 / 維運 的成本，使用現有服務則反之，如何選擇就依據各自使用的情境來評估了。\nHugo 預設支援 Disqus 留言服務，整合上也不困難。另外官網上的介紹也條列了許多替代方案。\nGithub Issues 大多數的軟工人員應該都不陌生，就是 Github 上提供針對專案 需求 / 異常 / 問題 的 Tracking 機制，支援 Markdown 語法。\nUtterances 以 Typescript 撰寫的開源留言服務工具。透過整合 Github Issues API 與 Github OAUTH，達到讓使用者可以針對如部落格或 WIKI 內容留言的功能。其留言的內容會被以 Issue 的形式存放在 Github 內。\n評估 最後選用透過 Utterances 整合 Github Issues 作為部落格留言功能的理由有以下幾個：\n與使用開源套件 Self-hosted 留言服務相比，導入流程相對單純，維護成本低。 目前部落格的版控 / Host 皆透過 Github 與其延伸應用 (Github Pages) 完成，若沒有特殊理由，習慣上還是想盡可能整合在同一個平台上。 現階段對部落格的定位為軟工為主的學習心得紀錄，主要受眾大多都有技術背景，應該也都有個 Github 帳號，本機制雖無法提供匿名留言功能，但預期影響不大。 Github 有提供 Issues Api，未來如果有服務移轉的需求，各方意見不至於帶不走。 留言支援 Markdown 語法。 終於導入 評估完畢，接著就來實作導入。\n於指定 Repo 安裝 Utterances APP 建立一個 Github Public Repository 用以 儲存 / 讀取 留言的內容。這邊直接使用 Hugo 專案的 Repo ，不額外建立。\n登入 Github 帳號，並 安裝 Utterances，基本上只需讓其能夠存取指定的 Repo 即可。\n設定，產出 Script 接著，透過 Utterances 官網 進行設定，產出需鑲嵌至部落格內的 Script：\nRepository : 就 Repo 的 Url 中，去掉 https://github.com/ 的部分。\nBlog Post ↔️ Issue Mapping : 文章與留言的映射，也會決定新增留言時 Github Issues 上的標題。日後部落格的編輯 / 搬移可能會因此設定而造成留言的異常。基本上可以想成是資料庫的外鍵。之所以選擇用 Title 作為映射，純粹是以 Issue 標題的可讀性做考量。\nIssue Label : 即對方留言後，在 Github Issues 上要加註什麼標籤，非必填。\nTheme : 留言區塊的主題，目前只能擇其一，沒辦法針對部落格複數主題的映射。\n填完之後就可以看到產生的 Script，把他複製起來。\n鑲嵌至 Hugo 專案內 這部分必須根據 Hugo 專案所選用的主題來處理，本專案使用的主題是 PaperMod，根據 文件 的描述：\n在專案的 layouts/partials 路徑下，建立名為 comments.html 的檔案。 #專案根目錄 mkdir -p layouts/partials touch layouts/partials/comments.html 複製貼上於 Utterances 產生的 Script。\n編輯 Hugo 專案的 Config\n# config.yaml params: comments: true 本機驗證 一樣透過 Hugo Server -D 將站台於本機 Run 起來，正確的話在文章的最下方會多了留言的區塊。\n除了在部落格該文章內，也可以在 Github Issues 看到留言的內容。因為之前設定透過文章標題作為映射，因此會以文章的標題作為 Issues 的標題。\n反向來說，我們在 Github Issues 上也是可以對留言進行回覆。\n大致上就是這樣。\n","permalink":"https://Cynical-Essay.github.io/posts/blog/hugo_with_github_issues/","summary":"前言 部落格雛形建立並 Host 在平台後，接下來要慢慢將各種 細節 / 機制 建立起來。而其中一項就是留言功能了。畢竟文章寫都寫了，哪怕是看到一兩個讀者的回饋，對寂寞的部落格作者而言都會起到激勵的作用。\n本文紀錄透過 Utterances 整合 Github Issues 至 Hugo 的過程，提供一個讓讀者能夠針對我們的文章回饋想法的功能。\n始於簡介 Comments Service With Hugo Comments Service，留言服務，提供使用者對網站 or 網路社群留言的功能。 使用者可以使用如 Disqus / Facebook Comments 等服務提供商提供的現有服務，也可以透過 Isso 等留言服務開源專案自行 Host。自行 Host 的特性是資訊不會存在第三方的服務內，可控性較高， 缺點則是需要付出 架設 / 維運 的成本，使用現有服務則反之，如何選擇就依據各自使用的情境來評估了。\nHugo 預設支援 Disqus 留言服務，整合上也不困難。另外官網上的介紹也條列了許多替代方案。\nGithub Issues 大多數的軟工人員應該都不陌生，就是 Github 上提供針對專案 需求 / 異常 / 問題 的 Tracking 機制，支援 Markdown 語法。\nUtterances 以 Typescript 撰寫的開源留言服務工具。透過整合 Github Issues API 與 Github OAUTH，達到讓使用者可以針對如部落格或 WIKI 內容留言的功能。其留言的內容會被以 Issue 的形式存放在 Github 內。","title":"部落格架設筆記(2) - 以 Github Issues 作為部落格的留言功能"},{"content":"前言 透過部落格學習新技術與紀錄生活，一直是個不錯的選擇。\n近期無意中發現除了過往使用如 Blogger / Medium / WP 等部落格平台服務外，也可以選擇透過 靜態網站生成框架 來撰寫部落格。\n好奇心加上以往的部落格往往寫不到幾篇就放著長草，想要一雪前恥。於是有點遞迴的，這個部落格的誕生，就從一篇如何透過 靜態網站生成框架 架設本部落格的文章作為起點。\nHugo 簡介 根據官網所述，Hugo 是一個靜態網站生成器 (Static Site Generator)。\n直白點說，就是配合其規則，把想要的內容，用指定的語法撰寫後，放到指定的檔案路徑下，透過 CLI 指令即可產生靜態網站的產出物，至於如路由之類的底層操作則交由框架來負責，使用者就不用費心了。\n這類生成器種類其實挺不少的，無論是以 Node.js 開發的 Hexo ，或是以 Gloang 開發的 Hugo 等，生態圈都相當完整，也都有一定的使用者。\n之所以會選擇 Hugo，單純是基於一個架設部落格的新手而言，與其花大量時間在研究這些差不多優秀的框架的細節，不如就擇一開始研究與實作，何況身為一個軟體工程師，應該可能八成大概也沒有什麼事情是解決不了的吧。\n樂觀主義是民族的鴉片\n-米蘭．昆德拉\n始於本機 環境安裝 MacOS 作業系統的使用者，配合 Homebrew 套件管理工具，安裝上就跟多數套件的安裝大同小異。\nbrew install hugo 一行，打完收工。\n然後也跟大多數套件的安裝一樣，來確認一下版本號。\nhugo version 就這樣，清楚明白，簡單粗暴，讚。\n建立專案 接著建立 Hugo 專案。\nHugo 的 Config 檔預設為 Toml 格式，另外也支援 Yaml/Json 格式，建立專案時可透過 -f 來指定格式。\nhugo new site blog-hugo-cynical-essay -f yaml 可以看一下到底長了什麼出來\ncd blog-hugo-cynical-essay tree -C 結果如圖\n初始的專案結構非常單純，除了一些資料夾路徑外，還有：\n位於根目錄的 config.yaml ，毫無疑問就是該靜態網站的組態檔。 位於 archeypes 路徑下的 default.md ，其作用為內容的樣板。\n當我們要開始寫一篇文章，可以透過 hugo new [path] 產生 Markdown 檔案，該檔案就會依照 default.md 檔描述的樣板產生預設的資訊。 選擇主題 再來要選擇一個主題。\n當然我們也可以自行撰寫設計主題，但是現階段還是以熟悉與了解框架為主。\n稍微列一下主題的挑選與使用上的心得：\n官網很貼心的把主題做了分類，使用者可以根據自身需求挑選適合的主題 (LandingPage / Blog / RWD .etc)。 多數的主題都有提供 Demo site，除了官網的圖示外，也可以用不同的裝置去 Demo site 實際操作看看是否符合預期。 主題通常會伴隨有自身的組態設定，這時候文件就變得蠻重要的，除了主題的適用性外，文件的完整度也可納入是否使用的評估範圍內。 這次選用 PaperMod 作為部落格的主題。根據文件描述，我們透過將主題的 Repo 加入 Git Submodules 清單內來導入該主題，首先在 Hugo 專案的根目錄進行 Git Repo 的初始化：\n# 專案根目錄 git init -b main 接著將主題專案的 Repo 加入 Git Submodules 內：\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 可以看到根目錄增加包含以下資訊的 .gitmodules 檔：\n[submodule \u0026#34;themes/PaperMod\u0026#34;] path = themes/PaperMod url = https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 路徑下也長出了 PaperMod 主題的相關檔案路徑與檔案，當然這些資源不會列在版控內。\n最後，PaperMod 的官方文件 內有提供預設的 config 內容，可以先複製貼上。 接著稍微留意一下 Config 檔內有個名稱為 theme 的 Key 值\ntheme: PaperMod 到這裡就可以聯想到，Hugo 相關的主題都會放在 themes/ 路徑下，彼此之間用主題名稱做區隔，再透過 Config 設定來決定欲使用的主題。\n最後在本機把站台 on 起來。\nhugo server 於是網站的雛形就建立起來了。\n來篇文章 緊接著當然就是要來建立第一篇文章了。\nHugo 框架下相關的內容，都會在 content/ 路徑下作延伸，我們先產生一篇文章出來。\nhugo new posts/my-first-post.md 可以看到在 content/posts 路徑下，生成了一個名叫 my-first-post.md 的檔案，該檔案依據 archetypes/default.md 的樣板資訊，產生了預設的內容 (一些 Front Matter，可以先想成是該檔案的 metadata)。\n上圖可以看出，目前該檔案是被設定成草稿狀態 (Draft:true)，前述的 hugo server 指令會忽略草稿狀態的檔案，因此我們必須要多下一個 -D 才行，另外執行 hugo 指令時，草稿也會被忽略。\nhugo server -D 文章長出來了，就是這麼簡單。\n終於 GitHub Pages 部署至平台 既然已經能夠寫文章了，下一步就是想辦法部署到平台上，這樣一來才能讓各路人馬品頭論足批評指教。\nHugo 的 官方文件 針對部署到各平台提供了種類完整且詳盡的說明。由於本部落格是透過 Github 來進行版本控管，自然選用了 Github Page 作為部落格的 Host。我們只負責產出文章， 讓 Github 當作讓本部落格能夠被看見的那條龍。\n「你就是那條龍。」\n-什麼都得幹的軟工哈士奇悲歌\nGitHub Page 簡介 大多數的軟體工程師，應該不至於沒聽過 Github 的大名吧。GitHub Page 可以算是該服務的延伸應用。使用者進行一次性設定，將靜態網站的產出物上傳至 Repo，之後就透過提交異動來對網站進行更新，非常方便。\n跟著文件做 看過 文件 後，用一張圖來解釋其網站內容更新機制的話，大約是這樣：\nSTEP 1: 網站作者在本機修改網站內容，並將異動上傳至 main 分支。 STEP 2: 上傳至 main 分支的事件會觸發 Github Action，Runner 會 clone main 分支的內容，對其執行hugo --minify指令產生靜態網站產出物，並將其上傳至 gh-pages 分支。 大致了解，那就一步步將該設定、該建立的處理起來：\n建立一個名為 {User Name}.github.io 的 Repository，因為我是 Github 免費仔，所以記得要設定成 Public。 設定 GitHub Action 需要的相關設定。\n# 專案根目錄 mkdir -p .github/workflows touch .github/workflows/gh-pages.yml # 參考下方連結，複製貼上到 gh-pages.yml 檔內 # https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action 設定 Remote Repo。 # 專案的根目錄 git remote add origin {repo url} git fetch origin 將異動上傳至 Remote Branch 。 git add --all git commit -m \u0026#34;init hugo site\u0026#34; git push --set-upstream origin main 接著可以在 Repository 的 Actions 頁籤確認是否有正常觸發 Github Action。\n既然 Github Action 看起來正常，那 gh-pages 分支內，應該會有靜態網站的產出物，趕緊來瞄一眼。\n果然如此，真是神機妙算啊!!\n最後到 Repository 下 Setting 頁籤左側的 Pages，設定 gh-pages Repo 為網站產出物，完成最後一哩路。 接著讓子彈飛一下，大約一兩分鐘內設定就會生效了。\n於是第一篇文章兼部落格架設，就這樣誕生了，可喜可賀。\n","permalink":"https://Cynical-Essay.github.io/posts/blog/hugo_with_github_pages/","summary":"前言 透過部落格學習新技術與紀錄生活，一直是個不錯的選擇。\n近期無意中發現除了過往使用如 Blogger / Medium / WP 等部落格平台服務外，也可以選擇透過 靜態網站生成框架 來撰寫部落格。\n好奇心加上以往的部落格往往寫不到幾篇就放著長草，想要一雪前恥。於是有點遞迴的，這個部落格的誕生，就從一篇如何透過 靜態網站生成框架 架設本部落格的文章作為起點。\nHugo 簡介 根據官網所述，Hugo 是一個靜態網站生成器 (Static Site Generator)。\n直白點說，就是配合其規則，把想要的內容，用指定的語法撰寫後，放到指定的檔案路徑下，透過 CLI 指令即可產生靜態網站的產出物，至於如路由之類的底層操作則交由框架來負責，使用者就不用費心了。\n這類生成器種類其實挺不少的，無論是以 Node.js 開發的 Hexo ，或是以 Gloang 開發的 Hugo 等，生態圈都相當完整，也都有一定的使用者。\n之所以會選擇 Hugo，單純是基於一個架設部落格的新手而言，與其花大量時間在研究這些差不多優秀的框架的細節，不如就擇一開始研究與實作，何況身為一個軟體工程師，應該可能八成大概也沒有什麼事情是解決不了的吧。\n樂觀主義是民族的鴉片\n-米蘭．昆德拉\n始於本機 環境安裝 MacOS 作業系統的使用者，配合 Homebrew 套件管理工具，安裝上就跟多數套件的安裝大同小異。\nbrew install hugo 一行，打完收工。\n然後也跟大多數套件的安裝一樣，來確認一下版本號。\nhugo version 就這樣，清楚明白，簡單粗暴，讚。\n建立專案 接著建立 Hugo 專案。\nHugo 的 Config 檔預設為 Toml 格式，另外也支援 Yaml/Json 格式，建立專案時可透過 -f 來指定格式。\nhugo new site blog-hugo-cynical-essay -f yaml 可以看一下到底長了什麼出來","title":"部落格架設筆記(1) - Hello Hugo"}]